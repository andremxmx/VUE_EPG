import type { Program as ProgramType } from '../helpers';
import type { BaseTimeFormat, ChannelWithPosiiton, DateTime, Position, ProgramItem } from '../helpers/types';
declare const _default: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            isSidebar: boolean;
            isTimeline: boolean;
            isBaseTimeFormat: BaseTimeFormat;
            isLine: boolean;
        }> & Omit<Readonly<import("vue").ExtractPropTypes<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<{
            programs: ProgramItem[];
            channels: ChannelWithPosiiton[];
            startDate: DateTime;
            endDate: DateTime;
            scrollY: number;
            dayWidth: number;
            hourWidth: number;
            numberOfHoursInDay: number;
            offsetStartHoursRange: number;
            sidebarWidth: number;
            itemHeight: number;
            onScroll: (e: UIEvent) => void;
            isBaseTimeFormat?: boolean | undefined;
            isSidebar?: boolean | undefined;
            isTimeline?: boolean | undefined;
            isLine?: boolean | undefined;
            isProgramVisible: (position: Position) => boolean;
            isChannelVisible: (position: Pick<Position, 'top'>) => boolean;
            setScrollBoxRef: (ref: any) => void;
        }>, {
            isSidebar: boolean;
            isLine: boolean;
            isTimeline: boolean;
            isBaseTimeFormat: boolean;
        }>>> & {
            "onChannel-click"?: ((channel: ChannelWithPosiiton) => any) | undefined;
            "onProgram-click"?: ((program: ProgramType) => any) | undefined;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "isSidebar" | "isTimeline" | "isBaseTimeFormat" | "isLine">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot | undefined;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
        $emit: ((event: "channel-click", channel: ChannelWithPosiiton) => void) & ((event: "program-click", program: ProgramType) => void);
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<{
            programs: ProgramItem[];
            channels: ChannelWithPosiiton[];
            startDate: DateTime;
            endDate: DateTime;
            scrollY: number;
            dayWidth: number;
            hourWidth: number;
            numberOfHoursInDay: number;
            offsetStartHoursRange: number;
            sidebarWidth: number;
            itemHeight: number;
            onScroll: (e: UIEvent) => void;
            isBaseTimeFormat?: boolean | undefined;
            isSidebar?: boolean | undefined;
            isTimeline?: boolean | undefined;
            isLine?: boolean | undefined;
            isProgramVisible: (position: Position) => boolean;
            isChannelVisible: (position: Pick<Position, 'top'>) => boolean;
            setScrollBoxRef: (ref: any) => void;
        }>, {
            isSidebar: boolean;
            isLine: boolean;
            isTimeline: boolean;
            isBaseTimeFormat: boolean;
        }>>> & {
            "onChannel-click"?: ((channel: ChannelWithPosiiton) => any) | undefined;
            "onProgram-click"?: ((program: ProgramType) => any) | undefined;
        }, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
            "channel-click": (channel: ChannelWithPosiiton) => void;
        } & {
            "program-click": (program: ProgramType) => void;
        }, string, {
            isSidebar: boolean;
            isTimeline: boolean;
            isBaseTimeFormat: BaseTimeFormat;
            isLine: boolean;
        }> & {
            beforeCreate?: ((() => void) | (() => void)[]) | undefined;
            created?: ((() => void) | (() => void)[]) | undefined;
            beforeMount?: ((() => void) | (() => void)[]) | undefined;
            mounted?: ((() => void) | (() => void)[]) | undefined;
            beforeUpdate?: ((() => void) | (() => void)[]) | undefined;
            updated?: ((() => void) | (() => void)[]) | undefined;
            activated?: ((() => void) | (() => void)[]) | undefined;
            deactivated?: ((() => void) | (() => void)[]) | undefined;
            beforeDestroy?: ((() => void) | (() => void)[]) | undefined;
            beforeUnmount?: ((() => void) | (() => void)[]) | undefined;
            destroyed?: ((() => void) | (() => void)[]) | undefined;
            unmounted?: ((() => void) | (() => void)[]) | undefined;
            renderTracked?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            renderTriggered?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            errorCaptured?: (((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void)[]) | undefined;
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
    } & Readonly<import("vue").ExtractPropTypes<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<{
        programs: ProgramItem[];
        channels: ChannelWithPosiiton[];
        startDate: DateTime;
        endDate: DateTime;
        scrollY: number;
        dayWidth: number;
        hourWidth: number;
        numberOfHoursInDay: number;
        offsetStartHoursRange: number;
        sidebarWidth: number;
        itemHeight: number;
        onScroll: (e: UIEvent) => void;
        isBaseTimeFormat?: boolean | undefined;
        isSidebar?: boolean | undefined;
        isTimeline?: boolean | undefined;
        isLine?: boolean | undefined;
        isProgramVisible: (position: Position) => boolean;
        isChannelVisible: (position: Pick<Position, 'top'>) => boolean;
        setScrollBoxRef: (ref: any) => void;
    }>, {
        isSidebar: boolean;
        isLine: boolean;
        isTimeline: boolean;
        isBaseTimeFormat: boolean;
    }>>> & {
        "onChannel-click"?: ((channel: ChannelWithPosiiton) => any) | undefined;
        "onProgram-click"?: ((program: ProgramType) => any) | undefined;
    } & import("vue").ShallowUnwrapRef<{}> & {} & import("vue").ComponentCustomProperties;
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<{
    programs: ProgramItem[];
    channels: ChannelWithPosiiton[];
    startDate: DateTime;
    endDate: DateTime;
    scrollY: number;
    dayWidth: number;
    hourWidth: number;
    numberOfHoursInDay: number;
    offsetStartHoursRange: number;
    sidebarWidth: number;
    itemHeight: number;
    onScroll: (e: UIEvent) => void;
    isBaseTimeFormat?: boolean | undefined;
    isSidebar?: boolean | undefined;
    isTimeline?: boolean | undefined;
    isLine?: boolean | undefined;
    isProgramVisible: (position: Position) => boolean;
    isChannelVisible: (position: Pick<Position, 'top'>) => boolean;
    setScrollBoxRef: (ref: any) => void;
}>, {
    isSidebar: boolean;
    isLine: boolean;
    isTimeline: boolean;
    isBaseTimeFormat: boolean;
}>>> & {
    "onChannel-click"?: ((channel: ChannelWithPosiiton) => any) | undefined;
    "onProgram-click"?: ((program: ProgramType) => any) | undefined;
}, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    "channel-click": (channel: ChannelWithPosiiton) => void;
} & {
    "program-click": (program: ProgramType) => void;
}, string, {
    isSidebar: boolean;
    isTimeline: boolean;
    isBaseTimeFormat: BaseTimeFormat;
    isLine: boolean;
}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
    $slots: {
        timeline: (_: {
            index: number;
            dividers: any[];
            formatTimelineTime: (index: number) => string;
            offsetStartHoursRange: number;
            hourWidth: number;
            theme: import("../helpers").Theme;
        }) => any;
        'timeline-last': (_: {
            theme: import("../helpers").Theme;
            formatTimelineTime: (index: number) => string;
            times: any[];
            offsetStartHoursRange: number;
        }) => any;
        channel: (_: {
            channel: ChannelWithPosiiton;
            theme: import("../helpers").Theme;
        }) => any;
        program: (_: {
            theme: import("../helpers").Theme;
            position: Omit<Position, "edgeEnd">;
            data: ProgramType;
            format12HoursTime: (date: string | number | Date) => string;
            isLive: import("vue").Ref<boolean>;
            isMinWidth: boolean;
            styles: import("vue").ComputedRef<{
                width: number;
                position: {
                    width: string;
                    height: string;
                    top: string;
                    left: string;
                };
            }>;
        } & {
            data: ProgramType;
        }) => any;
    };
});
export default _default;
declare type __VLS_NonUndefinedable<T> = T extends undefined ? never : T;
declare type __VLS_TypePropsToRuntimeProps<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: import('vue').PropType<__VLS_NonUndefinedable<T[K]>>;
    } : {
        type: import('vue').PropType<T[K]>;
        required: true;
    };
};
declare type __VLS_WithDefaults<P, D> = {
    [K in keyof Pick<P, keyof P>]: K extends keyof D ? P[K] & {
        default: D[K];
    } : P[K];
};
